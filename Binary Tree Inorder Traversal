Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /* Recursive Appraoch.
    public static List<Integer> inorder(TreeNode root){
        List<Integer> list = new ArrayList<>();

        while(root != null){
            inorder(root.left);
            list.add(root.val);
            inorder(root.right);
        }
        return list;
    }*/
    public List<Integer> inorderTraversal(TreeNode root) {
        //return inorder(root);
        List<Integer> out = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode curr = root;
        while(curr != null || !stack.isEmpty()){
            // first we gonna insert left nodes into the stack
            while(curr != null){
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop();
            out.add(curr.val);
            curr = curr.right;
        }
        return out;
    }
}
